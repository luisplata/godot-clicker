name: Godot Export
on:
  push:
    branches:
      - develop
      - test
      - main
env:
  GODOT_VERSION: 4.3
  GODOT_RELEASE: stable

jobs:
  export-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      artifact_url: ${{ steps.generate_artifact.outputs.artifact_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clean up
        uses: jlumbroso/free-disk-space@v1.2.0
        
      - name: Download and setup Godot
        run: |
          wget https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-${GODOT_RELEASE}/Godot_v${GODOT_VERSION}-${GODOT_RELEASE}_linux.x86_64.zip
          unzip Godot_v${GODOT_VERSION}-${GODOT_RELEASE}_linux.x86_64.zip
          mv Godot_v${GODOT_VERSION}-${GODOT_RELEASE}_linux.x86_64 godot
          chmod +x godot

      - name: Setup export templates
        run: |
          wget https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-${GODOT_RELEASE}/Godot_v${GODOT_VERSION}-${GODOT_RELEASE}_export_templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_RELEASE}
          unzip Godot_v${GODOT_VERSION}-${GODOT_RELEASE}_export_templates.tpz
          mv templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_RELEASE}/
          rm -rf templates

      - name: Clear export folder
        run: |
          rm -rf Export
          mkdir -p Export

      - name: Export project
        run: |
          ./godot --headless --export-release "Web" "Export/index.html"
          EXIT_CODE=$?
          echo "Godot export exit code: $EXIT_CODE"
          echo "Contents of Export directory:"
          ls -la Export
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Export failed. Godot log:"
            cat ~/.config/godot/editor_log.txt
            exit 1
          fi
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        id: get_artifact_id
        with:
          name: build-Windows
          path: build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: build-Web
          path: Export.zip

      - name: Generate Artifact URL
        id: generate_artifact
        run: |
          echo "::set-output name=artifact_url::https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload_artifact.outputs.artifact-id }}"

  deploy:
    runs-on: ubuntu-latest
    needs: export-and-deploy
    steps:
      - name: Clean and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Definir variables
            APP_DIR=${{ secrets.APP_DIR }}
            ARTIFACT_URL="${{ needs.export-and-deploy.outputs.artifact_url }}"
            TEMP_ZIP="$APP_DIR/Export.zip"
            # Imprimir variables
            echo "Artifact URL: $ARTIFACT_URL"
            echo "Target directory: $APP_DIR"
            echo "Temporary ZIP path: $TEMP_ZIP"
            # Comprobar si APP_DIR existe
            if [ -d "$APP_DIR" ]; then
              echo "APP_DIR exists, cleaning it."
              ls -la $APP_DIR
              rm -rf $APP_DIR/*
            else
              echo "APP_DIR does not exist. Creating it."
              mkdir -p $APP_DIR
            fi
            # Descargar el archivo ZIP
            echo "Downloading artifact..."
            curl -L $ARTIFACT_URL -o $TEMP_ZIP
            # Verificar si se descargó correctamente
            if [ -f "$TEMP_ZIP" ]; then
              echo "Downloaded ZIP file:"
              ls -la $TEMP_ZIP
            else
              echo "Failed to download ZIP file."
              exit 1
            fi
            # Descomprimir el ZIP
            echo "Unzipping $TEMP_ZIP into $APP_DIR"
            unzip -o $TEMP_ZIP -d $APP_DIR
            # Validar el contenido descomprimido
            echo "Contents of APP_DIR after unzipping:"
            ls -la $APP_DIR
            # Eliminar el archivo ZIP
            echo "Removing temporary ZIP file."
            rm $TEMP_ZIP
            # Confirmar finalización
            echo "Deployment completed successfully."
